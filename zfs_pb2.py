# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zfs.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='zfs.proto',
  package='zfs',
  syntax='proto3',
  serialized_pb=b'\n\tzfs.proto\x12\x03zfs\"$\n\x06\x43reate\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x0c\n\x04mode\x18\x02 \x01(\x05\"\x19\n\x06IntRet\x12\x0f\n\x07message\x18\x01 \x01(\x05\"\x19\n\tStringArr\x12\x0c\n\x04\x64\x61ta\x18\x01 \x03(\t\"\x92\x01\n\x06Mystat\x12\x0f\n\x07st_mode\x18\x03 \x01(\x05\x12\x10\n\x08st_nlink\x18\x04 \x01(\x05\x12\x0e\n\x06st_uid\x18\x05 \x01(\x05\x12\x0e\n\x06st_gid\x18\x06 \x01(\x05\x12\x0f\n\x07st_size\x18\x08 \x01(\x05\x12\x10\n\x08st_atime\x18\x0b \x01(\x05\x12\x10\n\x08st_mtime\x18\x0c \x01(\x05\x12\x10\n\x08st_ctime\x18\r \x01(\x05\x32\xcd\x03\n\x06ZfsRpc\x12$\n\x06\x63reate\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12%\n\x07getattr\x12\x0b.zfs.Create\x1a\x0b.zfs.Mystat\"\x00\x12#\n\x05mkdir\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12#\n\x05rmdir\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12\"\n\x04read\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12#\n\x05write\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12\"\n\x04open\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12#\n\x05\x66lush\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12%\n\x07release\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12$\n\x06unlink\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x12(\n\x07readdir\x12\x0b.zfs.Create\x1a\x0e.zfs.StringArr\"\x00\x12#\n\x05\x66sync\x12\x0b.zfs.Create\x1a\x0b.zfs.IntRet\"\x00\x42\x06\xa2\x02\x03HLWb\x06proto3'
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CREATE = _descriptor.Descriptor(
  name='Create',
  full_name='zfs.Create',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='zfs.Create.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mode', full_name='zfs.Create.mode', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=18,
  serialized_end=54,
)


_INTRET = _descriptor.Descriptor(
  name='IntRet',
  full_name='zfs.IntRet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='zfs.IntRet.message', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=56,
  serialized_end=81,
)


_STRINGARR = _descriptor.Descriptor(
  name='StringArr',
  full_name='zfs.StringArr',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='zfs.StringArr.data', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=83,
  serialized_end=108,
)


_MYSTAT = _descriptor.Descriptor(
  name='Mystat',
  full_name='zfs.Mystat',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='st_mode', full_name='zfs.Mystat.st_mode', index=0,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_nlink', full_name='zfs.Mystat.st_nlink', index=1,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_uid', full_name='zfs.Mystat.st_uid', index=2,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_gid', full_name='zfs.Mystat.st_gid', index=3,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_size', full_name='zfs.Mystat.st_size', index=4,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_atime', full_name='zfs.Mystat.st_atime', index=5,
      number=11, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_mtime', full_name='zfs.Mystat.st_mtime', index=6,
      number=12, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='st_ctime', full_name='zfs.Mystat.st_ctime', index=7,
      number=13, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=111,
  serialized_end=257,
)

DESCRIPTOR.message_types_by_name['Create'] = _CREATE
DESCRIPTOR.message_types_by_name['IntRet'] = _INTRET
DESCRIPTOR.message_types_by_name['StringArr'] = _STRINGARR
DESCRIPTOR.message_types_by_name['Mystat'] = _MYSTAT

Create = _reflection.GeneratedProtocolMessageType('Create', (_message.Message,), dict(
  DESCRIPTOR = _CREATE,
  __module__ = 'zfs_pb2'
  # @@protoc_insertion_point(class_scope:zfs.Create)
  ))
_sym_db.RegisterMessage(Create)

IntRet = _reflection.GeneratedProtocolMessageType('IntRet', (_message.Message,), dict(
  DESCRIPTOR = _INTRET,
  __module__ = 'zfs_pb2'
  # @@protoc_insertion_point(class_scope:zfs.IntRet)
  ))
_sym_db.RegisterMessage(IntRet)

StringArr = _reflection.GeneratedProtocolMessageType('StringArr', (_message.Message,), dict(
  DESCRIPTOR = _STRINGARR,
  __module__ = 'zfs_pb2'
  # @@protoc_insertion_point(class_scope:zfs.StringArr)
  ))
_sym_db.RegisterMessage(StringArr)

Mystat = _reflection.GeneratedProtocolMessageType('Mystat', (_message.Message,), dict(
  DESCRIPTOR = _MYSTAT,
  __module__ = 'zfs_pb2'
  # @@protoc_insertion_point(class_scope:zfs.Mystat)
  ))
_sym_db.RegisterMessage(Mystat)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), b'\242\002\003HLW')
import abc
from grpc.beta import implementations as beta_implementations
from grpc.early_adopter import implementations as early_adopter_implementations
from grpc.framework.alpha import utilities as alpha_utilities
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities
class EarlyAdopterZfsRpcServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def create(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def getattr(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def mkdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def rmdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def read(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def write(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def open(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def flush(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def release(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def unlink(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def readdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def fsync(self, request, context):
    raise NotImplementedError()
class EarlyAdopterZfsRpcServer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def start(self):
    raise NotImplementedError()
  @abc.abstractmethod
  def stop(self):
    raise NotImplementedError()
class EarlyAdopterZfsRpcStub(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def create(self, request):
    raise NotImplementedError()
  create.async = None
  @abc.abstractmethod
  def getattr(self, request):
    raise NotImplementedError()
  getattr.async = None
  @abc.abstractmethod
  def mkdir(self, request):
    raise NotImplementedError()
  mkdir.async = None
  @abc.abstractmethod
  def rmdir(self, request):
    raise NotImplementedError()
  rmdir.async = None
  @abc.abstractmethod
  def read(self, request):
    raise NotImplementedError()
  read.async = None
  @abc.abstractmethod
  def write(self, request):
    raise NotImplementedError()
  write.async = None
  @abc.abstractmethod
  def open(self, request):
    raise NotImplementedError()
  open.async = None
  @abc.abstractmethod
  def flush(self, request):
    raise NotImplementedError()
  flush.async = None
  @abc.abstractmethod
  def release(self, request):
    raise NotImplementedError()
  release.async = None
  @abc.abstractmethod
  def unlink(self, request):
    raise NotImplementedError()
  unlink.async = None
  @abc.abstractmethod
  def readdir(self, request):
    raise NotImplementedError()
  readdir.async = None
  @abc.abstractmethod
  def fsync(self, request):
    raise NotImplementedError()
  fsync.async = None
def early_adopter_create_ZfsRpc_server(servicer, port, private_key=None, certificate_chain=None):
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  method_service_descriptions = {
    "create": alpha_utilities.unary_unary_service_description(
      servicer.create,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "flush": alpha_utilities.unary_unary_service_description(
      servicer.flush,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "fsync": alpha_utilities.unary_unary_service_description(
      servicer.fsync,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "getattr": alpha_utilities.unary_unary_service_description(
      servicer.getattr,
      zfs_pb2.Create.FromString,
      zfs_pb2.Mystat.SerializeToString,
    ),
    "mkdir": alpha_utilities.unary_unary_service_description(
      servicer.mkdir,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "open": alpha_utilities.unary_unary_service_description(
      servicer.open,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "read": alpha_utilities.unary_unary_service_description(
      servicer.read,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "readdir": alpha_utilities.unary_unary_service_description(
      servicer.readdir,
      zfs_pb2.Create.FromString,
      zfs_pb2.StringArr.SerializeToString,
    ),
    "release": alpha_utilities.unary_unary_service_description(
      servicer.release,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "rmdir": alpha_utilities.unary_unary_service_description(
      servicer.rmdir,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "unlink": alpha_utilities.unary_unary_service_description(
      servicer.unlink,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
    "write": alpha_utilities.unary_unary_service_description(
      servicer.write,
      zfs_pb2.Create.FromString,
      zfs_pb2.IntRet.SerializeToString,
    ),
  }
  return early_adopter_implementations.server("zfs.ZfsRpc", method_service_descriptions, port, private_key=private_key, certificate_chain=certificate_chain)
def early_adopter_create_ZfsRpc_stub(host, port, metadata_transformer=None, secure=False, root_certificates=None, private_key=None, certificate_chain=None, server_host_override=None):
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  method_invocation_descriptions = {
    "create": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "flush": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "fsync": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "getattr": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.Mystat.FromString,
    ),
    "mkdir": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "open": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "read": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "readdir": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.StringArr.FromString,
    ),
    "release": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "rmdir": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "unlink": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
    "write": alpha_utilities.unary_unary_invocation_description(
      zfs_pb2.Create.SerializeToString,
      zfs_pb2.IntRet.FromString,
    ),
  }
  return early_adopter_implementations.stub("zfs.ZfsRpc", method_invocation_descriptions, host, port, metadata_transformer=metadata_transformer, secure=secure, root_certificates=root_certificates, private_key=private_key, certificate_chain=certificate_chain, server_host_override=server_host_override)

class BetaZfsRpcServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def create(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def getattr(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def mkdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def rmdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def read(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def write(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def open(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def flush(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def release(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def unlink(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def readdir(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def fsync(self, request, context):
    raise NotImplementedError()

class BetaZfsRpcStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def create(self, request, timeout):
    raise NotImplementedError()
  create.future = None
  @abc.abstractmethod
  def getattr(self, request, timeout):
    raise NotImplementedError()
  getattr.future = None
  @abc.abstractmethod
  def mkdir(self, request, timeout):
    raise NotImplementedError()
  mkdir.future = None
  @abc.abstractmethod
  def rmdir(self, request, timeout):
    raise NotImplementedError()
  rmdir.future = None
  @abc.abstractmethod
  def read(self, request, timeout):
    raise NotImplementedError()
  read.future = None
  @abc.abstractmethod
  def write(self, request, timeout):
    raise NotImplementedError()
  write.future = None
  @abc.abstractmethod
  def open(self, request, timeout):
    raise NotImplementedError()
  open.future = None
  @abc.abstractmethod
  def flush(self, request, timeout):
    raise NotImplementedError()
  flush.future = None
  @abc.abstractmethod
  def release(self, request, timeout):
    raise NotImplementedError()
  release.future = None
  @abc.abstractmethod
  def unlink(self, request, timeout):
    raise NotImplementedError()
  unlink.future = None
  @abc.abstractmethod
  def readdir(self, request, timeout):
    raise NotImplementedError()
  readdir.future = None
  @abc.abstractmethod
  def fsync(self, request, timeout):
    raise NotImplementedError()
  fsync.future = None

def beta_create_ZfsRpc_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  request_deserializers = {
    ('zfs.ZfsRpc', 'create'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'flush'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'fsync'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'getattr'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'mkdir'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'open'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'read'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'readdir'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'release'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'rmdir'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'unlink'): zfs_pb2.Create.FromString,
    ('zfs.ZfsRpc', 'write'): zfs_pb2.Create.FromString,
  }
  response_serializers = {
    ('zfs.ZfsRpc', 'create'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'flush'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'fsync'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'getattr'): zfs_pb2.Mystat.SerializeToString,
    ('zfs.ZfsRpc', 'mkdir'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'open'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'read'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'readdir'): zfs_pb2.StringArr.SerializeToString,
    ('zfs.ZfsRpc', 'release'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'rmdir'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'unlink'): zfs_pb2.IntRet.SerializeToString,
    ('zfs.ZfsRpc', 'write'): zfs_pb2.IntRet.SerializeToString,
  }
  method_implementations = {
    ('zfs.ZfsRpc', 'create'): face_utilities.unary_unary_inline(servicer.create),
    ('zfs.ZfsRpc', 'flush'): face_utilities.unary_unary_inline(servicer.flush),
    ('zfs.ZfsRpc', 'fsync'): face_utilities.unary_unary_inline(servicer.fsync),
    ('zfs.ZfsRpc', 'getattr'): face_utilities.unary_unary_inline(servicer.getattr),
    ('zfs.ZfsRpc', 'mkdir'): face_utilities.unary_unary_inline(servicer.mkdir),
    ('zfs.ZfsRpc', 'open'): face_utilities.unary_unary_inline(servicer.open),
    ('zfs.ZfsRpc', 'read'): face_utilities.unary_unary_inline(servicer.read),
    ('zfs.ZfsRpc', 'readdir'): face_utilities.unary_unary_inline(servicer.readdir),
    ('zfs.ZfsRpc', 'release'): face_utilities.unary_unary_inline(servicer.release),
    ('zfs.ZfsRpc', 'rmdir'): face_utilities.unary_unary_inline(servicer.rmdir),
    ('zfs.ZfsRpc', 'unlink'): face_utilities.unary_unary_inline(servicer.unlink),
    ('zfs.ZfsRpc', 'write'): face_utilities.unary_unary_inline(servicer.write),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_ZfsRpc_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  import zfs_pb2
  request_serializers = {
    ('zfs.ZfsRpc', 'create'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'flush'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'fsync'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'getattr'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'mkdir'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'open'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'read'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'readdir'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'release'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'rmdir'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'unlink'): zfs_pb2.Create.SerializeToString,
    ('zfs.ZfsRpc', 'write'): zfs_pb2.Create.SerializeToString,
  }
  response_deserializers = {
    ('zfs.ZfsRpc', 'create'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'flush'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'fsync'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'getattr'): zfs_pb2.Mystat.FromString,
    ('zfs.ZfsRpc', 'mkdir'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'open'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'read'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'readdir'): zfs_pb2.StringArr.FromString,
    ('zfs.ZfsRpc', 'release'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'rmdir'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'unlink'): zfs_pb2.IntRet.FromString,
    ('zfs.ZfsRpc', 'write'): zfs_pb2.IntRet.FromString,
  }
  cardinalities = {
    'create': cardinality.Cardinality.UNARY_UNARY,
    'flush': cardinality.Cardinality.UNARY_UNARY,
    'fsync': cardinality.Cardinality.UNARY_UNARY,
    'getattr': cardinality.Cardinality.UNARY_UNARY,
    'mkdir': cardinality.Cardinality.UNARY_UNARY,
    'open': cardinality.Cardinality.UNARY_UNARY,
    'read': cardinality.Cardinality.UNARY_UNARY,
    'readdir': cardinality.Cardinality.UNARY_UNARY,
    'release': cardinality.Cardinality.UNARY_UNARY,
    'rmdir': cardinality.Cardinality.UNARY_UNARY,
    'unlink': cardinality.Cardinality.UNARY_UNARY,
    'write': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'zfs.ZfsRpc', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
